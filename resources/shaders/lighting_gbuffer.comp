
#extension GL_EXT_nonuniform_qualifier : enable
#include "samplers.glsl"
#include "engine.glsl"

layout(local_size_x=8, local_size_y=8, local_size_z=1) in;

layout(std140, set = 0, binding = 1) readonly buffer LightsInfos {
	LightInfos lightInfos[];
};
layout(std140, set = 0, binding = 2) readonly buffer MaterialsInfos {
	MaterialInfos materialInfos[];
};

layout(set = 2, binding = 0, rgba8) uniform readonly image2D sceneColor;
layout(set = 2, binding = 1, rgba16f) uniform readonly image2D sceneNormal;
layout(set = 2, binding = 2) uniform texture2D  sceneDepth;
layout(set = 2, binding = 3, rgba16f) uniform writeonly image2D sceneLit;

layout(set = 2, binding = 4, rgba32ui) uniform readonly uimage3D lightClusters;
layout(set = 2, binding = 5) uniform texture2DArray shadowMaps;

layout(set = 3, binding = 0) uniform texture2DArray textures[]; ///< Color textures.

#include "lighting.glsl"

vec3 viewPositionFromDepth(float depth, vec2 pix){
	// Linearize depth -> in view space.
	float viewDepth =  -engine.p[3][2] / (depth + engine.p[2][2]);
	// Compute the x and y components in view space.
	vec2 ndcPos = 2.0 * (pix / engine.resolution.xy) - 1.0;
	vec3 viewPos = vec3(-ndcPos * viewDepth / vec2(engine.p[0][0], engine.p[1][1]) , viewDepth);
	return vec3(engine.iv * vec4(viewPos, 1.0));
}

void main(){
	// Safety exit.
	if(any(greaterThanEqual(gl_GlobalInvocationID.xy, engine.resolution.xy ))){
		return;
	}
	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
	vec4 albedo = imageLoad(sceneColor, pixelCoord);
	vec4 normalAndR = imageLoad(sceneNormal, pixelCoord);
	vec3 n = normalize(normalAndR.xyz);

	float depth = texelFetch(sampler2D(sceneDepth, sClampNear), pixelCoord, 0).r;

	// Early exit for background.
	if(albedo.a == 0.0){
		imageStore(sceneLit, pixelCoord, vec4(albedo.rgb, 1.0));
		return;
	}

	vec3 screenPos = vec3(pixelCoord, depth);
	vec3 worldPos = viewPositionFromDepth(depth, pixelCoord);
	vec3 viewDir = engine.camPos.xyz - worldPos;

	vec3 ambient = vec3(0.0);
	vec3 diffuse = vec3(1.0);
	vec3 specular = vec3(0.0);

	if(engine.shadingMode == MODE_SHADING_LIGHT){
		// Ambient.
		ambient  = engine.ambientColor.rgb;
		diffuse  = vec3(0.0);
		specular = vec3(0.0);

		applyLighting(screenPos, worldPos, viewDir, n, normalAndR.a, diffuse, specular);

	}

	vec3 finalColor = (diffuse + ambient) * albedo.rgb + specular;
	imageStore(sceneLit, pixelCoord, vec4(finalColor, 1.0));
}

