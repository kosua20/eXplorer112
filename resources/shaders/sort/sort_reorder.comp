
#include "../engine/engine.glsl"

layout(local_size_x=32, local_size_y=1, local_size_z=1) in;

layout(set = 0, binding = 1) uniform TransparentFrameData {
	uint firstMesh;
	uint meshCount;
	uint instanceCount;
	uint firstBit;
} transparentEngine;


layout(set = 0, binding = 2) readonly buffer TransparentCounter {
	uint transparentInstanceCounter[];
};

layout(set = 0, binding = 3) readonly buffer TransparentInfosIn {
	TransparentInstanceInfos transparentInfosIn[];
};

layout(set = 0, binding = 4) coherent buffer BinCounters {
	uint counters[];
};

layout(set = 0, binding = 5) writeonly buffer TransparentInfosOut {
	TransparentInstanceInfos transparentInfosOut[];
};

void main(){
	

	if(gl_GlobalInvocationID.x >= transparentInstanceCounter[0]){
		return;
	}

	TransparentInstanceInfos infos = transparentInfosIn[gl_GlobalInvocationID.x];
	uint maskedDistance = (infos.distanceToCamera >> transparentEngine.firstBit) & (SORT_BIN_COUNT - 1u);
	// Reverse order, draw from furthest to closest.
	uint binIndex = SORT_BIN_COUNT - 1u - maskedDistance;
	uint offset = atomicAdd(counters[binIndex], 1);

	transparentInfosOut[offset] = infos;

}
