
#include "../engine/engine.glsl"

layout(local_size_x=32, local_size_y=1, local_size_z=1) in;

layout(set = 0, binding = 1) uniform TransparentFrameData {
	uint firstMesh;
	uint meshCount;
	uint instanceCount;
	uint firstBit;
	uint batchCount;
} transparentEngine;


layout(set = 0, binding = 2) readonly buffer TransparentCounter {
	uint transparentInstanceCounter[];
};

layout(set = 0, binding = 3) readonly buffer TransparentInfosIn {
	TransparentInstanceInfos transparentInfosIn[];
};

layout(set = 0, binding = 4) readonly buffer BinCounters {
	uint counters[];
};

layout(set = 0, binding = 5) writeonly buffer TransparentInfosOut {
	TransparentInstanceInfos transparentInfosOut[];
};

void main(){

	// Load offsets for this batch.
	uint offsets[SORT_BIN_COUNT];
	uint batchIndex = gl_GlobalInvocationID.x;
	if(batchIndex >= transparentEngine.batchCount){
		return;
	}
	
	for(int i = 0; i < SORT_BIN_COUNT; ++i){
		offsets[i] = counters[batchIndex * SORT_BIN_COUNT + i];
	}

	// Then iterate over items in the batch.
	for(int j = 0; j < SORT_ITEMS_PER_BATCH; ++j)
	{
		uint itemIndex = batchIndex * SORT_ITEMS_PER_BATCH + j;
		if(itemIndex >= transparentInstanceCounter[0]){
			continue;
		}
		TransparentInstanceInfos infos = transparentInfosIn[itemIndex];
		uint maskedDistance = (infos.distanceToCamera >> transparentEngine.firstBit) & (SORT_BIN_COUNT - 1u);
		// Reverse order, draw from furthest to closest.
		uint binIndex = SORT_BIN_COUNT - 1u - maskedDistance;
		transparentInfosOut[offsets[binIndex]] = infos;
		offsets[binIndex] += 1u;
	}
}
