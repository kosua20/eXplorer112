
--- imgui_impl_vulkan.cpp	2021-08-10 14:34:34.000000000 +0200
+++ imgui_impl_vulkan.cpp	2021-08-10 21:53:14.000000000 +0200
@@ -86,7 +86,6 @@
     VkPipelineCreateFlags       PipelineCreateFlags;
     VkDescriptorSetLayout       DescriptorSetLayout;
     VkPipelineLayout            PipelineLayout;
-    VkDescriptorSet             DescriptorSet;
     VkPipeline                  Pipeline;
     uint32_t                    Subpass;
     VkShaderModule              ShaderModuleVert;
@@ -375,11 +374,9 @@
 {
     ImGui_ImplVulkan_Data* bd = ImGui_ImplVulkan_GetBackendData();
 
-    // Bind pipeline and descriptor sets:
+    // Bind pipeline:
     {
         vkCmdBindPipeline(command_buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline);
-        VkDescriptorSet desc_set[1] = { bd->DescriptorSet };
-        vkCmdBindDescriptorSets(command_buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, bd->PipelineLayout, 0, 1, desc_set, 0, NULL);
     }
 
     // Bind Vertex And Index Buffer:
@@ -533,6 +530,10 @@
                     scissor.extent.height = (uint32_t)(clip_rect.w - clip_rect.y);
                     vkCmdSetScissor(command_buffer, 0, 1, &scissor);
 
+					// Bind descriptor set with font or user texture
+					VkDescriptorSet desc_set[1] = { (VkDescriptorSet)pcmd->TextureId };
+					vkCmdBindDescriptorSets(command_buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, bd->PipelineLayout, 0, 1, desc_set, 0, NULL);
+
                     // Draw
                     vkCmdDrawIndexed(command_buffer, pcmd->ElemCount, 1, pcmd->IdxOffset + global_idx_offset, pcmd->VtxOffset + global_vtx_offset, 0);
                 }
@@ -601,19 +602,7 @@
     }
 
     // Update the Descriptor Set:
-    {
-        VkDescriptorImageInfo desc_image[1] = {};
-        desc_image[0].sampler = bd->FontSampler;
-        desc_image[0].imageView = bd->FontView;
-        desc_image[0].imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
-        VkWriteDescriptorSet write_desc[1] = {};
-        write_desc[0].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
-        write_desc[0].dstSet = bd->DescriptorSet;
-        write_desc[0].descriptorCount = 1;
-        write_desc[0].descriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
-        write_desc[0].pImageInfo = desc_image;
-        vkUpdateDescriptorSets(v->Device, 1, write_desc, 0, NULL);
-    }
+	VkDescriptorSet font_descriptor_set = (VkDescriptorSet)ImGui_ImplVulkan_AddTexture(bd->FontSampler, bd->FontView, VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL);
 
     // Create the Upload Buffer:
     {
@@ -691,7 +680,7 @@
     }
 
     // Store our identifier
-    io.Fonts->SetTexID((ImTextureID)(intptr_t)bd->FontImage);
+	io.Fonts->SetTexID((ImTextureID)font_descriptor_set);
 
     return true;
 }
@@ -748,12 +737,12 @@
         return;
 
     ImGui_ImplVulkan_CreateFontSampler(device, allocator);
-    VkSampler sampler[1] = { bd->FontSampler };
+    //VkSampler sampler[1] = { bd->FontSampler };
     VkDescriptorSetLayoutBinding binding[1] = {};
     binding[0].descriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
     binding[0].descriptorCount = 1;
     binding[0].stageFlags = VK_SHADER_STAGE_FRAGMENT_BIT;
-    binding[0].pImmutableSamplers = sampler;
+    binding[0].pImmutableSamplers = nullptr;
     VkDescriptorSetLayoutCreateInfo info = {};
     info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
     info.bindingCount = 1;
@@ -931,7 +920,7 @@
     }
 
     // Create Descriptor Set:
-    {
+   /* {
         VkDescriptorSetAllocateInfo alloc_info = {};
         alloc_info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
         alloc_info.descriptorPool = v->DescriptorPool;
@@ -939,7 +928,7 @@
         alloc_info.pSetLayouts = &bd->DescriptorSetLayout;
         err = vkAllocateDescriptorSets(v->Device, &alloc_info, &bd->DescriptorSet);
         check_vk_result(err);
-    }
+    }*/
 
     if (!bd->PipelineLayout)
     {
@@ -1464,3 +1453,39 @@
     buffers->Index = 0;
     buffers->Count = 0;
 }
+
+ImTextureID ImGui_ImplVulkan_AddTexture(VkSampler sampler, VkImageView image_view, VkImageLayout image_layout){
+	ImGui_ImplVulkan_Data* bd = ImGui_ImplVulkan_GetBackendData();
+
+	 VkResult err;
+
+	 ImGui_ImplVulkan_InitInfo* v = &bd->VulkanInitInfo;
+	 VkDescriptorSet descriptor_set;
+	 // Create Descriptor Set:
+	 {
+		 VkDescriptorSetAllocateInfo alloc_info = {};
+		 alloc_info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
+		 alloc_info.descriptorPool = v->DescriptorPool;
+		 alloc_info.descriptorSetCount = 1;
+		 alloc_info.pSetLayouts = &bd->DescriptorSetLayout;
+		 err = vkAllocateDescriptorSets(v->Device, &alloc_info, &descriptor_set);
+		 check_vk_result(err);
+	 }
+
+	 // Update the Descriptor Set:
+	 {
+		 VkDescriptorImageInfo desc_image[1] = {};
+		 desc_image[0].sampler = sampler;
+		 desc_image[0].imageView = image_view;
+		 desc_image[0].imageLayout = image_layout;
+		 VkWriteDescriptorSet write_desc[1] = {};
+		 write_desc[0].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
+		 write_desc[0].dstSet = descriptor_set;
+		 write_desc[0].descriptorCount = 1;
+		 write_desc[0].descriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
+		 write_desc[0].pImageInfo = desc_image;
+		 vkUpdateDescriptorSets(v->Device, 1, write_desc, 0, NULL);
+	 }
+
+	 return (ImTextureID)descriptor_set;
+ }

--- imgui_impl_vulkan.h	2021-08-10 14:34:34.000000000 +0200
+++ imgui_impl_vulkan.h	2021-08-10 21:53:14.000000000 +0200
@@ -40,7 +40,8 @@
 #if defined(IMGUI_IMPL_VULKAN_NO_PROTOTYPES) && !defined(VK_NO_PROTOTYPES)
 #define VK_NO_PROTOTYPES
 #endif
-#include <vulkan/vulkan.h>
+#include <volk/volk.h>
+#undef VK_NO_PROTOTYPES
 
 // Initialization data, for ImGui_ImplVulkan_Init()
 // [Please zero-clear before use!]
@@ -69,6 +70,7 @@
 IMGUI_IMPL_API bool     ImGui_ImplVulkan_CreateFontsTexture(VkCommandBuffer command_buffer);
 IMGUI_IMPL_API void     ImGui_ImplVulkan_DestroyFontUploadObjects();
 IMGUI_IMPL_API void     ImGui_ImplVulkan_SetMinImageCount(uint32_t min_image_count); // To override MinImageCount after initialization (e.g. if swap chain is recreated)
+IMGUI_IMPL_API ImTextureID    ImGui_ImplVulkan_AddTexture(VkSampler sampler, VkImageView image_view, VkImageLayout image_layout);
 
 // Optional: load Vulkan functions with a custom function loader
 // This is only useful with IMGUI_IMPL_VULKAN_NO_PROTOTYPES / VK_NO_PROTOTYPES
